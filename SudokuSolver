
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#~~~~~~~~~This is a program to solve Sudoku~~~~~~
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Steps:
# 1. Pick empty square
# 2. Try all nums
# 3. Find one that works
# 4. Repeat
# 5. Backtrack

board = [
    [7,8,0,4,0,0,1,2,0],
    [6,0,0,0,7,5,0,0,9],
    [0,0,0,6,0,1,0,7,8],
    [0,0,7,0,4,0,2,6,0],
    [0,0,1,0,5,0,9,3,0],
    [9,0,4,0,6,0,0,0,5],
    [0,7,0,3,0,0,0,1,2],
    [1,2,0,0,0,7,4,0,0],
    [0,4,9,2,0,6,0,0,7]
]

def solve(bo):

    find = find_empty(bo)
    if not find:
        return True
    else:
        row, col = find

    for num in range(1, 10):
        # print(bo)
        if valid(bo, num, (row, col)):
            bo[row][col] = num

            if solve(bo):
                return True

            bo[row][col] = 0

    return False

def valid(bo, num, pos):

    # Check column
    for j in range(len(bo[0])):
        if bo[pos[0]][j] == num and pos[1] != j:
            return False

    # Check row
    for i in range(len(bo)):
        if bo[i][pos[1]] == num and pos[0] != i:
            return False

    # Check square
    box_x = pos[0] // 3
    box_y = pos[1] // 3

    for i in range(box_x*3, box_x*3 + 3):
        for j in range(box_y*3, box_y*3 + 3):
            if bo[i][j] == num and (i, j) != pos:
                return False

    return True


def print_board(bo):
    for row in range(len(bo)):
        if row % 3 == 0 and row != 0:
            print("- - - - - - - - - - - - - -")
        for col in range(len(bo[0])):
            if col % 3 == 0 and col != 0:
                print("  !  ", end="")
            if col == 8:
                print(bo[row][col])
            else:
                print(str(bo[row][col]) + " ", end="")

def find_empty(bo):

    for row in range(len(bo)):
        for col in range(len(bo[row])):
            if bo[row][col] == 0:
                return (row, col)
    return None


print_board(board)
print("_____________________________")
print("")
solve(board)
print_board(board)
